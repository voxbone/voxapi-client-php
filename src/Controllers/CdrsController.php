<?php
/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 04/03/2015
 */

namespace APIv3SandboxLib\Controllers;

use APIv3SandboxLib\APIException;
use APIv3SandboxLib\APIHelper;
use APIv3SandboxLib\Configuration;
use Unirest\Unirest;

class CdrsController {
    /**
     * Request the generation of a call report for a full month
     * @param  string     $year             Required parameter: The year in YYYY format
     * @param  string     $month            Required parameter: The month in MM format
     * @return mixed response from the API call*/
    public function createCdrsFileRequest (
                $year,
                $month) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/cdrs/cdrsfile/request/{year}/{month}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'year'         => $year,
            'month'        => $month,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-type'    => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers);
        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List available monthly call reports
     * @return mixed response from the API call*/
    public function getCdrsFiles () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/cdrs/cdrsfile';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * Download a given monthly call report using MTOM
     * @param  string     $fileName     Required parameter: The name of the report to download
     * @return binary response from the API call*/
    public function getCdrsFile (
                $fileName) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/cdrs/cdrsfile/{fileName}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'fileName' => $fileName,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
}