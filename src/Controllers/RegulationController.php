<?php
/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 04/03/2015
 */

namespace APIv3SandboxLib\Controllers;

use APIv3SandboxLib\APIException;
use APIv3SandboxLib\APIHelper;
use APIv3SandboxLib\Configuration;
use Unirest\Unirest;
use Unirest\File;

class RegulationController {
   /**
     * Create a new address
     * @param   AddressModel $address    Required parameter: The address to create
     * @param   string|null $proof    Optional parameter: The proof of address
     * @return AddressIdentifierModel response from the API call*/
    public function address (
                $address,
                $proof = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address';
        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);
        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Content-type' => 'multipart/form-data; boundary=XXX'
        );
        //prepare body
        $body = '--XXX'."\n".'Content-ID: createRegulationAddressRequest'."\n".'Content-type: application/json'."\n\n".''
            . json_encode($address) .
            ''."\n".'--XXX--'."\n".'';
        if (!is_null($proof)) {
            $data = file_get_contents($proof);
            $uniProof = File::add($proof);
            $body = $body
                .'Content-ID: proofOfAddress'."\n"
                .'Content-Type:'. $uniProof->getMimeType()."\n"
                .'Content-Disposition: filename="' . $uniProof->getFilename() .'"'. "\n\n"
                .$data
                ."\n".'--XXX--';
        }
        //prepare API request
        $request = Unirest::put($queryUrl, $headers, $body);
        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);
        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
        return $response;
    }
        
        
    /**
     * Delete an address from your account
     * @param  int        $addressId        Required parameter: The identifier of the address
     * @return mixed response from the API call*/
    public function deleteAddress (
                $addressId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address/{addressId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'addressId'    => $addressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-type'    => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * Show information on a specific address
     * @param  int     $addressId     Required parameter: The address identifier
     * @return mixed response from the API call*/
    public function getAddress (
                $addressId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address/{addressId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'addressId' => $addressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List or search addresses in your account
     * @param  int             $pageNumber            Required parameter: The page number, starting at 0
     * @param  int             $pageSize              Required parameter: The size of the page
     * @param  string|null     $companyName           Optional parameter: The name of the company residing at this address
     * @param  string|null     $firstName             Optional parameter: The first name of the person residing at this address
     * @param  string|null     $lastName              Optional parameter: The last name of the person residing at this address
     * @param  string|null     $countryCodeA3         Optional parameter: The three letter identifier for the address country
     * @param  string|null     $city                  Optional parameter: The city name
     * @param  string|null     $streetName            Optional parameter: The street name
     * @param  string|null     $buildingNumber        Optional parameter: The building number
     * @param  string|null     $customerReference     Optional parameter: A human readable description for the address
     * @param  string|null     $status                Optional parameter: The status of the address
     * @param  bool|null       $linked                Optional parameter: A flag indicating if numbers are linked to this address
     * @param  string|null     $zipCode               Optional parameter: The zip code
     * @return mixed response from the API call*/
    public function getAddresses (
                $pageNumber,
                $pageSize,
                $companyName = NULL,
                $firstName = NULL,
                $lastName = NULL,
                $countryCodeA3 = NULL,
                $city = NULL,
                $streetName = NULL,
                $buildingNumber = NULL,
                $customerReference = NULL,
                $status = NULL,
                $linked = NULL,
                $zipCode = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageNumber'        => $pageNumber,
            'pageSize'          => $pageSize,
            'companyName'       => $companyName,
            'firstName'         => $firstName,
            'lastName'          => $lastName,
            'countryCodeA3'     => $countryCodeA3,
            'city'              => $city,
            'streetName'        => $streetName,
            'buildingNumber'    => $buildingNumber,
            'customerReference' => $customerReference,
            'status'            => $status,
            'linked'            => $linked,
            'zipCode'           => $zipCode,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'      => 'APIMATIC 2.0',
            'Accept'          => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * Link a number to a specified address
     * @param  string     $addressId     Required parameter: The address identifier
     * @param  array      $didIds        Required parameter: The list of number identifiers
     * @return mixed response from the API call*/
    public function addressLink (
                $addressId,
                $didIds) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address/{addressId}/link';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'addressId' => $addressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($didIds));

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * Unlink numbers from an address
     * @param  array     $didIds     Required parameter: The list of number identifiers
     * @return mixed response from the API call*/
    public function addressUnlink (
                $didIds) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address/unlink';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($didIds));

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List the zipcodes recognised by Voxbone
     * @param  string          $countryCodeA3     Required parameter: The three letter identifier for the country
     * @param  int             $pageNumber        Required parameter: The page number, starting at 0
     * @param  int             $pageSize          Required parameter: The page size
     * @param  string|null     $areaCode          Optional parameter: The area code
     * @return mixed response from the API call*/
    public function getZipcode (
                $countryCodeA3,
                $pageNumber,
                $pageSize,
                $areaCode = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/zipcode';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'countryCodeA3' => $countryCodeA3,
            'pageNumber'    => $pageNumber,
            'pageSize'      => $pageSize,
            'areaCode'      => $areaCode,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);
        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
     /**
     * Upload a proof for a specific address
     * @param   int $addressId    Required parameter: The address identifier
     * @param   string $proof    Required parameter: The proof to upload
     * @return StatusModel response from the API call*/
    public function addressProof (
                $addressId,
                $proof) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address/{addressId}/proof';
        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'addressId' => $addressId,
            ));
        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);
        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Content-type' => 'multipart/form-data; boundary=XXX'
        );
        //prepare body
        $data = file_get_contents($proof);
        $uniProof = File::add($proof);
        $body = '--XXX'."\n".'Content-ID: proofOfAddress'."\n"
                .'Content-Type:'. $uniProof->getMimeType()."\n"
                .'Content-Disposition: filename="' . $uniProof->getFilename() .'"'. "\n\n"
                .$data
                ."\n".'--XXX--';
        //prepare API request
        $request = Unirest::put($queryUrl, $headers, $body);
        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);
        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
        return $response;
    }

        
    /**
     * Request the verification of an address
     * @param  int        $addressId        Required parameter: The address identifier
     * @return mixed response from the API call*/
    public function addressVerification (
                $addressId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address/{addressId}/verification';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'addressId'    => $addressId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Content-type'    => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * Check if an address is valid to unblock numbers from a given country and type
     * @param  string     $addressId                    Required parameter: The address identifier
     * @param  string     $didType                      Required parameter: The number type
     * @param  string     $destinationCountryCodeA3     Required parameter: The three letter identifier for the country
     * @return mixed response from the API call*/
    public function getAddressValidation (
                $addressId,
                $didType,
                $destinationCountryCodeA3) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/regulation/address/{addressId}/validation';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'addressId'                => $addressId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'didType'                  => $didType,
            'destinationCountryCodeA3' => $destinationCountryCodeA3,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent'             => 'APIMATIC 2.0',
            'Accept'                 => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
}
