<?php
/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 04/08/2015
 */

namespace APIv3SandboxLib\Controllers;

use APIv3SandboxLib\APIException;
use APIv3SandboxLib\APIHelper;
use APIv3SandboxLib\Configuration;
use Unirest\Unirest;

class InventoryController {
    /**
     * List or search DIDs in your account
     * @param  int             $pageSize                Required parameter: The page size (max number of entities that are displayed in the response)
     * @param  int             $pageNumber              Required parameter: The page number, starting at 0
     * @param  bool|null       $webRtcEnabled           Optional parameter: A boolean flag indicating if the numbers are WebRTC enabled
     * @param  bool|null       $smsOutbound             Optional parameter: A boolean flag indicating if the numbers are SMS Outbound enabled
     * @param  int|null        $deliveryId              Optional parameter: The identifier of the POP the numbers are mapped to
     * @param  string|null     $portingReference        Optional parameter: The reference for the numbers' porting request
     * @param  string|null     $orderReference          Optional parameter: The reference for the numbers' order
     * @param  string|null     $countryCodeA3           Optional parameter: The three letter identifier of the country the numbers are part of
     * @param  string|null     $serviceType             Optional parameter: The service type of the numbers
     * @param  int|null        $smsLinkGroupId          Optional parameter: The identifier of the sms link group the numbers are mapped to
     * @param  int|null        $faxUriId                Optional parameter: The identifier of the fax uri the numbers are mapped to
     * @param  int|null        $voiceUriId              Optional parameter: The identifier of the voice uri the numbers are mapped to
     * @param  int|null        $regulationAddressId     Optional parameter: The identifier of the address the numbers are linked to
     * @param  string|null     $e164Pattern             Optional parameter: The E164, or part of it. The system will attempt to find any DID which E164 contains this string of numbers
     * @param  array|null      $didGroupIds             Optional parameter: A list of identifiers for the didGroup the DIDs are part of
     * @param  bool|null       $needAddressLink         Optional parameter: A boolean flag indicating if the numbers need to be linked to an address for regulation purposes
     * @param  array|null      $didIds                  Optional parameter: A list of DID identifiers
     * @return mixed response from the API call*/
    public function getDids (
                $pageSize,
                $pageNumber,
                $webRtcEnabled = NULL,
                $smsOutbound = NULL,
                $deliveryId = NULL,
                $portingReference = NULL,
                $orderReference = NULL,
                $countryCodeA3 = NULL,
                $serviceType = NULL,
                $smsLinkGroupId = NULL,
                $faxUriId = NULL,
                $voiceUriId = NULL,
                $regulationAddressId = NULL,
                $e164Pattern = NULL,
                $didGroupIds = NULL,
                $needAddressLink = NULL,
                $didIds = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/did';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageSize'            => $pageSize,
            'pageNumber'          => $pageNumber,
            'webRtcEnabled'       => $webRtcEnabled,
            'smsOutbound'         => $smsOutbound,
            'deliveryId'          => $deliveryId,
            'portingReference'    => $portingReference,
            'orderReference'      => $orderReference,
            'countryCodeA3'       => $countryCodeA3,
            'serviceType'         => $serviceType,
            'smsLinkGroupId'      => $smsLinkGroupId,
            'faxUriId'            => $faxUriId,
            'voiceUriId'          => $voiceUriId,
            'regulationAddressId' => $regulationAddressId,
            'e164Pattern'         => $e164Pattern,
            'didGroupIds'         => $didGroupIds,
            'needAddressLink'     => $needAddressLink,
            'didIds'              => $didIds,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'        => 'APIMATIC 2.0',
            'Accept'            => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List the available credit packages for purchase
     * @return mixed response from the API call*/
    public function getCreditPackages () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/creditpackage';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List available didgroups for number ordering
     * @param  string          $countryCodeA3       Required parameter: The three letter identifier of the didgroup country
     * @param  int             $pageNumber          Required parameter: The page number, starting at 0.
     * @param  int             $pageSize            Required parameter: The page size (max number of entities that are displayed in the response).
     * @param  array|null      $didGroupIds         Optional parameter: The identifiers for the didgroups to list
     * @param  int|null        $stateId             Optional parameter: The identifier for the didgroup state
     * @param  string|null     $cityNamePattern     Optional parameter: A pattern that will be matched against the didgroup city
     * @param  string|null     $rateCenter          Optional parameter: The rate center name of the didgroup
     * @param  string|null     $areaCode            Optional parameter: The area code of the DID group (e.g. “646”).
     * @param  string|null     $didType             Optional parameter: The type of number
     * @param  array|null      $featureIds          Optional parameter: The features supported by the didgroup
     * @return mixed response from the API call*/
    public function getDidgroups (
                $countryCodeA3,
                $pageNumber,
                $pageSize,
                $didGroupIds = NULL,
                $stateId = NULL,
                $cityNamePattern = NULL,
                $rateCenter = NULL,
                $areaCode = NULL,
                $didType = NULL,
                $featureIds = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/didgroup';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'countryCodeA3'   => $countryCodeA3,
            'pageNumber'      => $pageNumber,
            'pageSize'        => $pageSize,
            'didGroupIds'     => $didGroupIds,
            'stateId'         => $stateId,
            'cityNamePattern' => $cityNamePattern,
            'rateCenter'      => $rateCenter,
            'areaCode'        => $areaCode,
            'didType'         => $didType,
            'featureIds'      => $featureIds,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List the restrictions that apply to a specific country
     * @param  string     $countryCodeA3     Required parameter: The three letter identifier for the country
     * @return mixed response from the API call*/
    public function getRestrictions (
                $countryCodeA3) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/country/{countryCodeA3}/restriction';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'countryCodeA3' => $countryCodeA3,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List the states in a specific country
     * @param  string     $countryCodeA3     Required parameter: The three letter identifier for the country
     * @return mixed response from the API call*/
    public function getStates (
                $countryCodeA3) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/country/{countryCodeA3}/state';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'countryCodeA3' => $countryCodeA3,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List the trunks available in your account
     * @return mixed response from the API call*/
    public function getTrunks () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/trunk';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List the zones available in your account
     * @return mixed response from the API call*/
    public function getZones () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/zone';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List the available features for didgroups
     * @return mixed response from the API call*/
    public function getFeatures () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/feature';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * List countries available in the Voxbone coverage
     * @param  int             $pageNumber        Required parameter: The page number, starting at 0
     * @param  int             $pageSize          Required parameter: The page size (max number of entities that are displayed in the response).
     * @param  string|null     $countryCodeA3     Optional parameter: The three letter identifier for the country
     * @param  string|null     $didType           Optional parameter: DID services offered in the country
     * @return mixed response from the API call*/
    public function getCountries (
                $pageNumber,
                $pageSize,
                $countryCodeA3 = NULL,
                $didType = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/country';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageNumber'    => $pageNumber,
            'pageSize'      => $pageSize,
            'countryCodeA3' => $countryCodeA3,
            'didType'       => $didType,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
    /**
     * Show information on a specific country
     * @param  string     $countryCodeA3     Required parameter: The three letter identifier for the country
     * @return mixed response from the API call*/
    public function getCountry (
                $countryCodeA3) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/inventory/country/{countryCodeA3}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'countryCodeA3' => $countryCodeA3,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response;
    }
        
}